public class BitOperator{
	public static void main(String[] args){
		
		// 位运算
		// 1.先得到2的补码 = 》 2的原码 00000000 00000000 00000000 00000010
		//    2的补码：即原码
		// 2. 3的补码：3的原码 00000000 00000000 00000000 00000011
		// 3. 按位与 &
		// 00000000 00000000 00000000 00000010
		// 00000000 00000000 00000000 00000011
		// 00000000 00000000 00000000 00000010  补码结果
		// 00000000 00000000 00000000 00000010  转成原码
		System.out.println(2&3); //2


		// -2的原码：10000000 00000000 00000000 00000010
		// 反码：11111111 11111111 11111111 11111101
		// 补码：11111111 11111111 11111111 11111110
		// ~-2: 00000000 00000000 00000000 00000001 这个还是补码
		// 但因为补码是正数，所以原码也是这个
		System.out.println(~-2);//1

		// 2的补码：00000000 00000000 00000000 00000010
		// 按位取反：11111111 11111111 11111111 11111101  补码
		// 反码：11111111 11111111 11111111 11111100
		// 原码：10000000 00000000 00000000 00000011
		System.out.println(~2);// -3

		System.out.println(1 >> 2);  //0
		System.out.println(1 << 2);  // 4
		System.out.println(4 << 2); //16

		// 原码：10000000 00000000 00000000 00000100
		// 反码：11111111 11111111 11111111 11111011
		// 补码：11111111 11111111 11111111 11111100
		// 左移：11111111 11111111 11111111 11110000
		// 反码：11111111 11111111 11111111 11101111
		// 原码：10000000 00000000 00000000 00010000
		System.out.println(-4 << 2); //-16

		// 原码：10000000 00000000 00000000 00000100
		// 反码：11111111 11111111 11111111 11111011
		// 补码：11111111 11111111 11111111 11111100
		// 右移：11111111 11111111 11111111 11111111
		// 反码：11111111 11111111 11111111 11111110
		// 原码：10000000 00000000 00000000 00000001
		System.out.println(-4 >> 2); //-1

		// 原码：10000000 00000000 00000000 00000100
		// 反码：11111111 11111111 11111111 11111011
		// 补码：11111111 11111111 11111111 11111100
		// 右移：00111111 11111111 11111111 11111111
		// 反码：00111111 11111111 11111111 11111111
		// 原码：00111111 11111111 11111111 11111111
		System.out.println(-4 >>> 2); //1073741823
        
       
	}
}